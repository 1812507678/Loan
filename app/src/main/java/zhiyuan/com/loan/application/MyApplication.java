package zhiyuan.com.loan.application;import android.Manifest;import android.app.Activity;import android.app.Application;import android.content.Context;import android.content.Intent;import android.content.SharedPreferences;import android.content.pm.PackageManager;import android.os.Build;import android.text.TextUtils;import android.util.Log;import com.hyphenate.chat.EMClient;import com.hyphenate.chat.EMOptions;import com.tencent.bugly.crashreport.CrashReport;import com.umeng.analytics.MobclickAgent;import java.io.BufferedReader;import java.io.FileNotFoundException;import java.io.FileReader;import java.io.IOException;import java.lang.reflect.Method;import java.util.ArrayList;import java.util.List;import cn.bmob.push.BmobPush;import cn.bmob.v3.Bmob;import cn.sharesdk.framework.ShareSDK;import cn.smssdk.SMSSDK;import zhiyuan.com.loan.activity.BaseActivity;import zhiyuan.com.loan.service.CoreService;import zhiyuan.com.loan.util.SharedPreferencesUtil;/** * Created by Administrator on 2016/7/14. */public class MyApplication extends Application {	private static final String TAG = "MyApplication";	public static SharedPreferences sharedPreferences;	public static List<Activity> activityList;	private BaseActivity mCurrApplicationActivity;	private static MyApplication myApplication;	@Override	public void onCreate() {		super.onCreate();		Log.i(TAG,"onCreate");		// 初始化 Bmob SDK		Bmob.initialize(this, "ba002a70fd5933301d2821f72ec145c1");		//BmobConfig config =new BmobConfig.Builder(this)		////设置appkey		//.setApplicationId("Your Application ID")		////请求超时时间（单位为秒）：默认15s		//.setConnectTimeout(30)		////文件分片上传时每片的大小（单位字节），默认512*1024		//.setUploadBlockSize(1024*1024)		////文件的过期时间(单位为秒)：默认1800s		//.setFileExpiration(2500)		//.build();		//Bmob.initialize(config);		// 启动推送服务		BmobPush.startWork(this);		sharedPreferences = getSharedPreferences("userinfo", MODE_PRIVATE);		SharedPreferencesUtil.initSharedPreferences(this);		activityList = new ArrayList<>();		//初始化环信		EMOptions options = new EMOptions();		// 默认添加好友时，是不需要验证的，改成需要验证		options.setAcceptInvitationAlways(false);		//初始化		EMClient.getInstance().init(this, options);		//在做打包混淆时，关闭debug模式，避免消耗不必要的资源		EMClient.getInstance().setDebugMode(true);		//shareSDK		ShareSDK.initSDK(this);		SMSSDK.initSDK(this, "1794bfbce3f30", "6b5af934b4b5f535687f3d358de29890");		//bug分析		CrashReport.initCrashReport(getApplicationContext(), "3845980061", false);		//友盟统计		MobclickAgent.setDebugMode(true);		MobclickAgent.setScenarioType(this, MobclickAgent.EScenarioType.E_UM_NORMAL);        /*String deviceInfo = getDeviceInfo(this);        Log.i(TAG,deviceInfo);*/        startService(new Intent(this, CoreService.class));	}	public static boolean checkPermission(Context context, String permission) {		boolean result = false;		if (Build.VERSION.SDK_INT >= 23) {			try {				Class<?> clazz = Class.forName("android.content.Context");				Method method = clazz.getMethod("checkSelfPermission", String.class);				int rest = (Integer) method.invoke(context, permission);				if (rest == PackageManager.PERMISSION_GRANTED) {					result = true;				} else {					result = false;				}			} catch (Exception e) {				result = false;			}		} else {			PackageManager pm = context.getPackageManager();			if (pm.checkPermission(permission, context.getPackageName()) == PackageManager.PERMISSION_GRANTED) {				result = true;			}		}		return result;	}	public static String getDeviceInfo(Context context) {		try {			org.json.JSONObject json = new org.json.JSONObject();			android.telephony.TelephonyManager tm = (android.telephony.TelephonyManager) context					.getSystemService(Context.TELEPHONY_SERVICE);			String device_id = null;			if (checkPermission(context, Manifest.permission.READ_PHONE_STATE)) {				device_id = tm.getDeviceId();			}			String mac = null;			FileReader fstream = null;			try {				fstream = new FileReader("/sys/class/net/wlan0/address");			} catch (FileNotFoundException e) {				fstream = new FileReader("/sys/class/net/eth0/address");			}			BufferedReader in = null;			if (fstream != null) {				try {					in = new BufferedReader(fstream, 1024);					mac = in.readLine();				} catch (IOException e) {				} finally {					if (fstream != null) {						try {							fstream.close();						} catch (IOException e) {							e.printStackTrace();						}					}					if (in != null) {						try {							in.close();						} catch (IOException e) {							e.printStackTrace();						}					}				}			}			json.put("mac", mac);			if (TextUtils.isEmpty(device_id)) {				device_id = mac;			}			if (TextUtils.isEmpty(device_id)) {				device_id = android.provider.Settings.Secure.getString(context.getContentResolver(),						android.provider.Settings.Secure.ANDROID_ID);			}			json.put("device_id", device_id);			return json.toString();		} catch (Exception e) {			e.printStackTrace();		}		return null;	}	public BaseActivity getmCurrApplicationActivity() {		return mCurrApplicationActivity;	}	public void setmCurrApplicationActivity(BaseActivity mCurrApplicationActivity) {		this.mCurrApplicationActivity = mCurrApplicationActivity;	}	public static MyApplication getInstance(){		if (myApplication==null){			myApplication = new MyApplication();		}		return myApplication;	}}